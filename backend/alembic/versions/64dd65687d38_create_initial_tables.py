"""create initial tables
Revision ID: 64dd65687d38
Revises: 760765adbc73
Create Date: 2025-10-04 22:41:35.082457
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '64dd65687d38'
down_revision: Union[str, Sequence[str], None] = '760765adbc73'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('carspecs',
    sa.Column('make', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('model', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('size_class', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('length_mm', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('width_mm', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('height_mm', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('make', 'model', 'year', name=op.f('carspecs_pkey'))
    )
    op.create_table('models',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('metrics_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=op.f('models_pkey'))
    )
    op.create_table('runs',
    sa.Column('run_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('lot_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('video_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('ended_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('run_id', name='runs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('stalls',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('lot_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('geom_wkt', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('center_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('center_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='stalls_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('detections',
    sa.Column('det_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ts_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('x1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('y1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('x2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('y2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('conf', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cls', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['run_id'], ['runs.run_id'], name=op.f('detections_run_id_fkey')),
    sa.PrimaryKeyConstraint('det_id', name=op.f('detections_pkey'))
    )
    op.create_table('events',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('stall_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ts', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['stall_id'], ['stalls.id'], name=op.f('events_stall_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('events_pkey'))
    )
    op.create_table('stall_features',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_ev', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_ada', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('connectors', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('width_class', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dist_to_entrance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['stalls.id'], name=op.f('stall_features_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('stall_features_pkey'))
    )
    op.create_table('spot_status',
    sa.Column('run_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ts_ms', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('spot_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['run_id'], ['runs.run_id'], name=op.f('spot_status_run_id_fkey')),
    sa.ForeignKeyConstraint(['spot_id'], ['stalls.id'], name=op.f('spot_status_spot_id_fkey')),
    sa.PrimaryKeyConstraint('run_id', 'ts_ms', 'spot_id', name=op.f('spot_status_pkey'))
    )
    op.create_table('stall_neighbors',
    sa.Column('stall_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('neighbor_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['neighbor_id'], ['stalls.id'], name=op.f('stall_neighbors_neighbor_id_fkey')),
    sa.ForeignKeyConstraint(['stall_id'], ['stalls.id'], name=op.f('stall_neighbors_stall_id_fkey')),
    sa.PrimaryKeyConstraint('stall_id', 'neighbor_id', name=op.f('stall_neighbors_pkey'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('stall_neighbors')
    op.drop_table('spot_status')
    op.drop_table('stall_features')
    op.drop_table('events')
    op.drop_table('detections')
    op.drop_table('stalls')
    op.drop_table('runs')
    op.drop_table('models')
    op.drop_table('carspecs')
    # ### end Alembic commands ###